#include <stdio.h>
#include <string.h>
#include <time.h>

#define MAX_USERNAME 50
#define MAX_PASSWORD 50
#define MAX_ATTEMPTS 5
#define LOCK_DURATION 10 // seconds

// Global storage for registered credentials
char stored_username[MAX_USERNAME];
char stored_password[MAX_PASSWORD];

// Cross-platform delay using time.h
void delay(int seconds) {
    time_t start = time(NULL);
    while (time(NULL) < start + seconds);
}

// Lock system after failed attempts
void lock_screen() {
    printf("\n?? Too many failed attempts. System is locked for %d seconds...\n", LOCK_DURATION);
    for (int i = LOCK_DURATION; i > 0; i--) {
        printf("? Try again in %d seconds...\r", i);
        fflush(stdout);
        delay(1);
    }
    printf("\n?? You can try again now.\n");
}

// Setup: register a username and password
void register_user() {
    printf("?? SETUP: Create your credentials\n");
    printf("---------------------------------\n");

    printf("?? Set Username: ");
    fgets(stored_username, MAX_USERNAME, stdin);
    stored_username[strcspn(stored_username, "\n")] = '\0'; // remove newline

    printf("?? Set Password: ");
    fgets(stored_password, MAX_PASSWORD, stdin);
    stored_password[strcspn(stored_password, "\n")] = '\0'; // remove newline

    printf("\n? Credentials set! Now proceed to login.\n");
}

// Authenticate user
int login() {
    char input_username[MAX_USERNAME];
    char input_password[MAX_PASSWORD];
    int attempts = 0;

    while (1) {
        printf("\n?? Username: ");
        fgets(input_username, MAX_USERNAME, stdin);
        input_username[strcspn(input_username, "\n")] = '\0';

        printf("?? Password: ");
        fgets(input_password, MAX_PASSWORD, stdin);
        input_password[strcspn(input_password, "\n")] = '\0';

        if (strcmp(input_username, stored_username) == 0 &&
            strcmp(input_password, stored_password) == 0) {
            return 1; // success
        } else {
            attempts++;
            printf("? Incorrect credentials. Attempts left: %d\n", MAX_ATTEMPTS - attempts);
        }

        if (attempts >= MAX_ATTEMPTS) {
            lock_screen();
            attempts = 0;
        }
    }
}

int main() {
    printf("========================================\n");
    printf("       ?? BASIC SECURITY SYSTEM\n");
    printf("========================================\n");

    register_user();  // Set credentials

    if (login()) {
        printf("\n? Access Granted!\n");
        printf("?? Welcome to the protected system area.\n");
        printf("------------------------------------------\n");
        printf("?? Logs | ?? Configurations | ?? Secure Files\n");
        printf("------------------------------------------\n");
    }

    return 0;
}
